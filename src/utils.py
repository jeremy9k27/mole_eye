import cv2   #include opencv library functions in python
import numpy as np
from rf import classify_single


def avg_array(original_array):
    new_array = original_array.copy()
   
    # Calculate averages based on specified conditions
    for m in [0,1]:
        for i in range(original_array.shape[1]):
            if i == 0:
                new_array[m][i] = (original_array[m][i])
            elif i == (original_array.shape[1]) - 1:
                new_array[m][i] = (original_array[m][i] + original_array[m][i - 1]) / 2
            else:
                new_array[m][i] = (original_array[m][i - 1] + original_array[m][i] + original_array[m][i + 1]) / 3

    return new_array.astype(int)

def classify(centroid_array):
    quills = (centroid_array[2,-1] - centroid_array[2,0]) // (10**5) / 1000
    starting_angle = np.mean(centroid_array[3, 1:4])
    ending_angle = np.mean(centroid_array[3, -5:-1])
    diff = ending_angle - starting_angle
    
    pitch_type = classify_single([[quills, starting_angle, ending_angle, diff]])

    return [str(quills), str(diff), str(pitch_type)]


def disp_pitch(pitch_array, original) -> None:

    onto = original
    
    for i in range(pitch_array.shape[1]):
        center = (pitch_array[0][i].astype(int), pitch_array[1][i].astype(int))
        cv2.circle(onto, center, 5, (255,0,0), -1)

    outputs = classify(pitch_array)
    while True:
        cv2.putText(onto, outputs[0], (10, 460), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255), 2)
        cv2.putText(onto, outputs[1], (10, 430), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255), 2)
        cv2.putText(onto, outputs[2], (10, 400), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255), 2)
    
        cv2.imshow("pitch map", onto)

        if cv2.waitKey(1) & 0xFF == ord('p'):
                original = original
                break
        

def process(pitch_array):
    pitch_array = pitch_array[:,~((pitch_array[0,:] == 1) & (pitch_array[1,:] == 1))]
    i = 0
    limit = (pitch_array.shape[1])
    while i < limit -1:
        if ((abs(pitch_array[0][i+1] - pitch_array[0][i])) + (abs(pitch_array[1][i+1] - pitch_array[1][i])) < 160):
            i += 1
        else:
            pitch_array = np.delete(pitch_array, i+1, axis=1)
            limit += -1
    i = 0
    return find_end(avg_array(pitch_array))

curveball1 = [[617, 610, 597, 586, 575, 565, 555, 546, 537, 529, 523, 518, 515, 511, 506, 503, 499, 496, 492, 489, 486, 484, 480, 475, 470, 466, 465, 465, 465, 465, 465, 465, 466, 467], [55, 59, 68, 76, 84, 91, 99, 108, 116, 123, 129, 134, 139, 144, 149, 152, 157, 162, 167, 169, 174, 179, 185, 191, 200, 207, 209, 210, 211, 213, 214, 216, 218, 220]]
fastball1 = [[611, 599, 578, 561, 547, 534, 525, 517, 510, 504, 499, 494, 490, 487, 484, 482, 477, 474, 472, 473, 471, 470, 470, 469, 469, 468], [153, 157,165,171,175,179,182,185,188,199,193,196,198,200,202,203,207,211,214,215,216,217,218,220,221,222]]
sweeper1 = [[624,617,604,591,580,569,559,550,542,533,524,516,510,503,496,488,482,478,475,473], [167,168,171,174,177,180,183,186,189,193,197,201,204,208,213,218,223,226,229,231]]

def disp_pitch_test(pitch_array):
    black = np.zeros((480, 640, 3))
    
    for i in range(pitch_array.shape[1]):
        cv2.circle(black, (pitch_array[0][i], pitch_array[1][i]), 5, (255,0,0), -1)

    text = classify(pitch_array)
    
    while True:
        cv2.putText(black, text[0], (10, 460), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)
        cv2.putText(black, "horiz", (10, 430), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)
        cv2.putText(black, text[1], (90, 430), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)
        cv2.putText(black, "vert", (10, 400), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)
        cv2.putText(black, text[2], (90, 400), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)

        cv2.imshow("pitch map", black)

        if cv2.waitKey(1) & 0xFF == ord('p'):
                break
        
def overlay(pitch_array_shorter, pitch_array_longer):
    print(pitch_array_shorter)
    black = np.zeros((480, 640, 3))
    
    for i in range(pitch_array_longer.shape[1]):
        cv2.circle(black, (pitch_array_longer[0][i], pitch_array_longer[1][i]), 5, (0,255,0), -1)
        
    for i in range(pitch_array_shorter.shape[1]):
        cv2.circle(black, (pitch_array_shorter[0][i], pitch_array_shorter[1][i]), 5, (255,0,0), -1)

    
    
    while True:
        cv2.imshow("pitch map", black)

        if cv2.waitKey(1) & 0xFF == ord('p'):
                break
        
def find_end(pitch_array):
    prev_direction = 0
    angles = np.array([0])
    for i in range(pitch_array.shape[1]):
       
        if i>0:
            movement = (pitch_array[:,i] - pitch_array[:,i-1]) * [1,-1,1]
            movement = np.where(movement == 0, 0.1, movement)
            
            slope = movement[1] / movement[0]
            direction = np.arctan([slope])
            if movement[0]<0:
                direction = direction + (3.1415926)
            direction = direction % 6.2832
            angles = np.append(angles, direction)
            if i>1:
                if abs(direction - prev_direction) > 3.14159/8:
                    return np.vstack((pitch_array[:,:i], angles[:i]))
            prev_direction = direction

    pitch_array = np.vstack((pitch_array, angles))
    return pitch_array


#disp_pitch_test(avg_array(process(np.array(curveball1))))
#disp_pitch_test(avg_array(process(np.array(fastball1)))) 
#disp_pitch_test(avg_array(process(np.array(sweeper1))))

bad = np.array([[549, 476, 446, 417, 389, 372, 355,   1, 332, 321, 315, 305, 301, 296,
  290, 286, 283, 281, 277, 275, 272, 270, 269,   1,   1, 265, 265, 263,
    1,   1,   1,   1],
 [ 27,  75,  95, 114, 134, 148, 163,   1, 183, 193, 203, 210, 220, 225,
  233, 240, 247, 253, 257, 265, 270, 275, 282,   1,   1, 300, 304, 310,
    1,   1,   1,   1]])

#disp_pitch_test(avg_array(process(bad)))
'''

1: [[427, 418, 409, 401, 394, 388, 383, 379, 375, 372, 369, 366, 363, 361, 360, 359, 358, 357, 356, 355, 354, 354, 353, 352, 351, 350, 349, 348, 348, 348, 348, 348, 348, 348, 349, 349, 350, 351, 352, 353, 353, 354, 356, 357, 357, 358, 359, 360, 361]
 ,[3, 15, 28, 42, 54, 65, 75, 85, 93, 101, 108, 115, 121, 128, 134, 139, 145, 150, 155, 159, 164, 168, 173, 177, 182, 187, 191, 196, 200, 204, 208, 212, 216, 218, 220, 219, 219, 218, 218, 217, 216, 216, 216, 216, 217, 219, 220, 222, 222]]


2: [[497, 486, 475, 466, 457, 448, 438, 428, 421, 413, 406, 398, 392, 387, 384, 380, 375, 369, 362, 357, 352, 349, 348, 348, 348, 349, 350, 351, 352, 352, 353, 353, 353, 354, 355, 358, 361, 363, 364, 364, 364, 364, 364, 365, 365, 365, 365, 364, 364, 364, 364, 364, 364, 363, 362, 361, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360]
 ,[19, 33, 46, 59, 70, 82, 95, 110, 121, 133, 144, 158, 169, 177, 182, 188, 197, 209, 223, 235, 245, 251, 254, 255, 255, 256, 257, 259, 262, 266, 270, 275, 280, 283, 285, 286, 288, 289, 290, 290, 290, 291, 291, 291, 291, 291, 290, 290, 290, 290, 289, 289, 289, 288, 287, 286, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285]]


3: [[570, 553, 539, 527, 517, 509, 503, 498, 493, 489, 486, 484, 482, 480, 478, 476, 475, 474, 474, 473, 473, 473, 473, 474, 475, 475, 476]
 ,[12, 30, 47, 63, 77, 89, 100, 110, 119, 128, 136, 144, 152, 159, 165, 172, 178, 184, 190, 195, 201, 206, 212, 217, 222, 226, 228]]


4: [[397 387 378 370 364 360 356 353 351 349 347 346 345 345 345 345 345 344
  344 345 346 347 348 349 350 352 352 353 353 354 354 354 354 354 354 353
  353 353 353 353 354 354 354 354 354 354 354 354 354 354 354 353 353 353
  353]
 [  5  24  43  61  77  90 101 111 119 128 135 142 149 155 161 167 172 178
  183 189 195 200 205 209 213 217 221 225 228 229 229 229 230 230 231 231
  230 230 231 232 232 233 234 235 237 239 240 242 243 244 245 247 248 249
  250]]

5: [[441, 434, 428, 423, 418, 414, 411, 408, 406, 404, 402, 399, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 387, 386, 385, 385, 385, 385, 385, 385, 385, 386, 386, 386, 386, 386, 387, 388, 388, 389, 389, 390, 390, 390, 391, 391, 391, 391, 391, 391, 391, 392, 392, 393, 393, 394, 394, 394, 394, 394, 394, 395, 395, 395, 395, 395, 396, 396, 396, 396, 396, 396]
 ,[9, 23, 36, 49, 60, 69, 78, 85, 93, 99, 105, 111, 116, 121, 126, 131, 136, 140, 144, 148, 153, 157, 162, 166, 170, 175, 179, 181, 181, 179, 176, 173, 169, 165, 162, 160, 157, 154, 152, 150, 149, 148, 147, 146, 145, 144, 143, 144, 145, 145, 146, 147, 148, 149, 151, 153, 155, 158, 161, 165, 168, 172, 177, 182, 187, 192, 197, 203, 210, 216, 221, 223]]


6: [[434 416 400 387 376 368 361 355 351 347 344 342 340 338 337 336 334 333
  332 332 332 332 333 333 333 333 334 334 334 332 330 328 326 324 323 321
  319 318 316 315 313 311 309 308 307 306 306 306 306 305 305 305 304 304
  304 304 304 304 304 304 304 305 305 305 305 305 305 305 304 304 304 304
  308 312 317 312 307 303 302 302]
 [ 13  38  61  80  97 111 123 134 143 152 160 168 174 181 187 193 199 204
  210 214 219 224 230 234 239 243 248 252 253 252 250 248 246 245 244 243
  242 241 240 240 240 240 240 240 240 240 240 241 242 243 244 245 247 251
  256 258 258 257 256 256 256 256 256 256 256 256 256 256 256 256 256 256
  255 253 252 253 254 256 256 256]]

7: [[413, 404, 395, 387, 380, 373, 367, 361, 356, 351, 346, 343, 339, 336, 332, 329, 327, 324, 322, 319, 316, 314, 312, 310, 308, 306, 305, 303, 301, 299, 297, 295, 295, 295, 295, 296, 297, 298, 300, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 309, 310, 311, 312, 313, 314, 314, 315, 315, 316, 316, 317, 318, 319, 320, 320, 321, 322, 323, 324, 325, 326, 327, 328, 328, 329]
 ,[4, 16, 29, 41, 53, 63, 73, 82, 90, 98, 106, 113, 120, 126, 133, 139, 145, 151, 157, 162, 168, 173, 178, 183, 188, 194, 199, 204, 209, 213, 218, 222, 226, 228, 229, 229, 229, 229, 229, 229, 230, 231, 233, 235, 237, 239, 241, 244, 247, 251, 256, 263, 267, 270, 269, 269, 270, 270, 270, 269, 268, 268, 269, 268, 268, 267, 267, 267, 267, 266, 265, 264, 265, 266, 267]]

  .pq
'''

'''
overlay(find_end(avg_array(np.array( [[427, 418, 409, 401, 394, 388, 383, 379, 375, 372, 369, 366, 363, 361, 360, 359, 358, 357, 356, 355, 354, 354, 353, 352, 351, 350, 349, 348, 348, 348, 348, 348, 348, 348, 349, 349, 350, 351, 352, 353, 353, 354, 356, 357, 357, 358, 359, 360, 361]
 ,[3, 15, 28, 42, 54, 65, 75, 85, 93, 101, 108, 115, 121, 128, 134, 139, 145, 150, 155, 159, 164, 168, 173, 177, 182, 187, 191, 196, 200, 204, 208, 212, 216, 218, 220, 219, 219, 218, 218, 217, 216, 216, 216, 216, 217, 219, 220, 222, 222]]

))), avg_array(np.array([[427, 418, 409, 401, 394, 388, 383, 379, 375, 372, 369, 366, 363, 361, 360, 359, 358, 357, 356, 355, 354, 354, 353, 352, 351, 350, 349, 348, 348, 348, 348, 348, 348, 348, 349, 349, 350, 351, 352, 353, 353, 354, 356, 357, 357, 358, 359, 360, 361]
 ,[3, 15, 28, 42, 54, 65, 75, 85, 93, 101, 108, 115, 121, 128, 134, 139, 145, 150, 155, 159, 164, 168, 173, 177, 182, 187, 191, 196, 200, 204, 208, 212, 216, 218, 220, 219, 219, 218, 218, 217, 216, 216, 216, 216, 217, 219, 220, 222, 222]]

)))
'''